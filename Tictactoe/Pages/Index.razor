@page "/"
@using Tictactoe.Core
@using Tictactoe.Core.Extensions
@using Tictactoe.Core.Player

<style>
    
    .game-container{
        width:300px;
        margin:0 auto;
    }

    .board{
        position: relative;
        width:306px;
    }

    .hide{
        visibility:hidden;
    }

</style>

<div class="game-container">
    <StatusCard Status="_game.Status" />
    <div>
        <div class="text-right p-2 @HideRestartCssClass()">
            <button class="btn btn-outline-danger btn-sm" @onclick="OnRestart"> <span class="oi oi-loop-circular"></span> Restart</button>
        </div>
       
        <div class="board">
            <BoardTable Board="_game.Board" OnCellSelected="CellSelected"></BoardTable>
            <StatusOverlay Status="_game.Status" OnRestart="OnRestart" OnStart="OnStart"></StatusOverlay>
        </div>
    </div>

    <div class="hide">
        0. allow restart
        1. strike across winning cells
        2. use cartoony fonts
        3. use random pictures for noughts and crosses
        4. display when the result is tie (display the game is over and break the infinite loop)
    </div>
</div>
@code {

    GameEngine _game = NewGame();
    static UserMoveStream _userMovePublisher;

    private static GameEngine NewGame()
    {
        _userMovePublisher = new UserMoveStream();
        IPlayer player1 = new LocalUserPlayer(_userMovePublisher);
        IPlayer player2 = new RandomBotPlayer();
        var engine  = new GameEngine(player1, player2);
        return engine;
    }

  private void OnRestart()
  {
      _game = NewGame();
      OnStart();
  }

  private void OnStart()
  {
      _game.GameStatusChanged += (status) => StateHasChanged();
      _game.Start();
  }

  private void CellSelected(Coordinates coords)
  {
      // ignore any selection when it is not Player1's turn
      if (_game.Status == GameStatus.Player1Turn){
          _userMovePublisher.Publish(coords);
      }
  }

  private string HideRestartCssClass()
  {
      if(!_game.Status.IsInProgress())
      {
          return "hide";
      }

      return String.Empty;
  }
}

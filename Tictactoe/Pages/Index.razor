@page "/"
@using Tictactoe.Core
@using Tictactoe.Core.Extensions
@using Tictactoe.Core.Player
@using Tictactoe.Model

@inject Model.Settings GameSettings

<style>
    
    .game-container{
        width:300px;
        margin:0 auto;
    }

    .board{
        position: relative;
        width:306px;
    }

    .hide{
        visibility:hidden;
    }

</style>

<div class="game-container">
    <StatusCard Status="_gameEngine.Status" />
    <div>
        <div class="text-right p-2 @HideRestartCssClass()">
            <button class="btn btn-outline-danger btn-sm" @onclick="OnRestart"> <span class="oi oi-loop-circular"></span> Restart</button>
        </div>
       
        <div class="board">
            <BoardTable Board="_gameEngine.Board" OnCellSelected="CellSelected"></BoardTable>
            <StatusOverlay Status="_gameEngine.Status" OnRestart="OnRestart" OnStart="OnStart"></StatusOverlay>
        </div>
    </div>

    <div class="hide">
        0. allow restart
        1. strike across winning cells
        2. use cartoony fonts
        3. use random pictures for noughts and crosses
        4. display when the result is tie (display the game is over and break the infinite loop)
    </div>
</div>
@code {

    private GameEngine _gameEngine;
    private UserMoveStream _userMovePublisher;

    protected override void OnInitialized()
    {
        _gameEngine = NewGame();
    }

    private GameEngine NewGame()
    {
        _userMovePublisher = new UserMoveStream();
        var player1 = new LocalUserPlayer(_userMovePublisher, CellMarker.Cross);
        var player2 = GetPlayer2(GameSettings.ComputerPlayerMode, CellMarker.Nought);
        var engine  = new GameEngine(player1, player2);
        return engine;
    }

  private void OnRestart()
  {
      _gameEngine = NewGame();
      OnStart();
  }

  private void OnStart()
  {
      // todo: check if this causes memory leak
      _gameEngine.GameStatusChanged += (status) => StateHasChanged();
      _gameEngine.Start();
  }

  private void CellSelected(Coordinates coords)
  {
      _userMovePublisher.Publish(coords);
  }

  private string HideRestartCssClass()
  {
      if(!_gameEngine.Status.IsInProgress())
      {
          return "hide";
      }

      return String.Empty;
  }

    private Player<CellMarker> GetPlayer2(ComputerPlayerMode playerMode, CellMarker marker)
    {
        return playerMode switch
        {
            ComputerPlayerMode.Random => new RandomBotPlayer(marker) as Player<CellMarker>,
            ComputerPlayerMode.Smart => new SmartBotPlayer(marker),
            _ => throw new NotSupportedException($"Player mode {playerMode} is not supported")
        };
    }
}
